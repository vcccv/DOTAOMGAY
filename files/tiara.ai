globalsinteger array Winteger array WWinteger array MWinteger array WWWinteger array WMWcode MWWinteger MMWboolean WWMWinteger array MWWWinteger array MWMWinteger array MMWWinteger MMMW=0integer WWWMW=0integer WWMWW=0integer WWMMW=0integer WMWWW=0integer WMWMW=0integer WMMWW=0integer WMMMW=0integer MWWWW=0integer MWWMW=0integer MWMWW=0integer MWMMW=0integer MMWWW=0integer MMWMW=0integer MMMWW=0integer MMMMW=0integer WWWWWW=0integer WWWWMW=0integer WWWMWW=0integer array WWWMMWinteger WWMWWW=0integer WWMWMW=0integer WWMMWWinteger array WWMMMWinteger array WMWWWWendglobalsfunction WMWWMW takes integer WMWMWW returns nothingset MWWW[4]=0set MWWW[1]=WMWMWWset MWWW[2]=-1set MWWW[3]=-1endfunctionfunction WMWMMW takes integer WMMWWW,integer WMMWMW returns nothingset W[1000]=0set W[WMMWWW+3]=WMMWMWset W[WMMWWW+2]=WMMWMWset W[WMMWWW+1]=WMMWMWset W[WMMWWW]=WMMWMWset W[WMMWWW-1]=WMMWMWset W[WMMWWW-2]=WMMWMWset W[WMMWWW-3]=WMMWMWendfunctionfunction WMMMWW takes integer WMMWWW,integer WMMMMW returns nothingset WW[1000]=0set WW[WMMWWW]=WMMMMWendfunctionfunction MWWWWW takes integer MWWWMW,integer MWWMWW returns nothinglocal integer ii=MWWWMWset WW[ii]=MWWMWWendfunctionfunction MWWMMW takes integer MWMWWW returns nothingset MW[4]=0set MW[3]=MWMWWWset MW[2]=MWMWWWset MW[1]=MWMWWWset MW[0]=MWMWWWendfunctionfunction MWMWMW takes integer WMMWWW,integer MWMMWW returns nothingset WWW[1001]=0set WWW[WMMWWW]=MWMMWWendfunctionfunction MWMMMW takes integer MMWWWW returns nothingset WMW[4]=0set WMW[3]=MMWWWWset WMW[2]=MMWWWWset WMW[1]=MMWWWWset WMW[0]=MMWWWWendfunctionfunction TypecastNewAArray takes nothing returns nothinglocal integer Wendfunctionfunction MMWWMW takes nothing returns integerloopreturn Wendloopreturn 0endfunctionfunction TypecastNewBAarray takes nothing returns nothinglocal integer WWendfunctionfunction MMWMWW takes nothing returns integerloopreturn WWendloopreturn 0endfunctionfunction TypecastNewCAarray takes nothing returns nothinglocal integer MWendfunctionfunction MMWMMW takes nothing returns integerloopreturn MWendloopreturn 0endfunctionfunction TypecastNewDAarray takes nothing returns nothinglocal integer WWWendfunctionfunction MMMWWW takes nothing returns integerloopreturn WWWendloopreturn 0endfunctionfunction TypecastArray takes nothing returns nothinglocal integer MWWWendfunctionfunction MMMWMW takes nothing returns integerloopreturn MWWWendloopreturn 0endfunctionfunction TypecastNewEAarray takes nothing returns nothinglocal integer WMWendfunctionfunction MMMMWW takes nothing returns integerloopreturn WMWendloopreturn 0endfunctionfunction MMMMMW takes code c returns nothingset MWW=creturnendfunctionfunction WWWWWWW takes integer i returns nothingset MMW=ireturnendfunctionfunction WWWWMWW takes boolean b returns nothingset WWMW=breturnendfunctionfunction Typecast1 takes nothing returns nothinglocal integer MWWlocal code MMWendfunctionfunction WWWMWWW takes code c returns integercall MMMMMW(c)loopreturn MWWendloopreturn 0endfunctionfunction WWWMWMW takes integer i returns codecall WWWWWWW(i)loopreturn MMWendloopreturn nullendfunctionfunction Typecast2 takes nothing returns nothinglocal integer WWWWlocal string MMWendfunctionfunction Typecast3 takes nothing returns nothinglocal integer WWMWlocal boolean MMWendfunctionfunction WWWMMMW takes boolean b returns integercall WWWWMWW(b)loopreturn WWMWendloopreturn 0endfunctionfunction Typecast666 takes nothing returns nothinglocal integer WMWWlocal hashtable MMWendfunctionfunction Typecast777 takes nothing returns nothinglocal integer WMMWlocal unit MMWendfunctionfunction WWMWWWW takes integer i returns unitcall WWWWWWW(i)loopreturn MMWendloopreturn nullendfunctionfunction WWMWWMW takes integer WWMWMWW,integer WWMWMMW returns integerlocal integer WWMMWWW=WWMWMWW-(WWMWMWW/ WWMWMMW)*WWMWMMWif(WWMMWWW<0)thenset WWMMWWW=WWMMWWW+WWMWMMWendifreturn WWMMWWWendfunctionfunction AnewNewGlobal takes nothing returns nothinglocal integer iendfunctionfunction WWMMWMW takes integer WWMMMWW returns integerreturn MMWW[WWMMMWW/ 4]endfunctionfunction WWMMMMW takes integer id,integer k returns nothingset MWMW[0]=0x0C010900set MWMW[1]=kset MWMW[2]=0x11010000set MWMW[3]=idset MWMW[4]=0x0C010400set MWMW[6]=0x27000000set MWMW[8]=0x07090000set MWMW[9]=0x005Eset MWMW[10]=0x0E010400set MWMW[11]=id+1set MWMW[12]=0x12010100set MWMW[13]=0x005Eset MWMW[14]=0x0E010400set MWMW[15]=0x005Eset MWMW[16]=0x11010000set MWMW[17]=id+1set MWMW[18]=0x27000000endfunctionfunction Typecast takes nothing returns nothinglocal integer MWMWendfunctionfunction WMWWWWW takes nothing returns integerloopreturn MWMWendloopreturn 0endfunctionfunction WMWWWMW takes nothing returns integerreturn-0x005E0704return 0x2700endfunctionfunction WMWWMWW takes nothing returns nothinglocal integer i=0x2114D008endfunctionfunction init_variable takes nothing returns nothingendfunctionfunction WMWWMMW takes nothing returns nothinglocal integer array ilocal integer alocal integer blocal integer WMWMWWWlocal integer WMWMWMWlocal integer WMWMMWWlocal integer WMWMMMWlocal integer WMMWWWWlocal integer WMMWWMWlocal integer WMMWMWWcall WMWMMW(0,0)call WMMMWW(0,0)call MWWMMW(0)call MWMWMW(0,0)call MWMMMW(0)set MMWW[1000]=0call WMWMMW(0,i[MMWWMW()/ 4])call WMMMWW(0,i[MMWMWW()/ 4])call MWWMMW(i[MMWMMW()/ 4])call MWMWMW(0,i[MMMWWW()/ 4])call MWMMMW(i[MMMMWW()/ 4])set a=i[MMMWMW()/ 4]-0xBD7214set WMWWW=aset WWWMW=WMWWW+0xD46118set WMWMWWW=i[i[i[i[WWWMW/ 4]/ 4+5]/ 4+36]/ 4+1]set WMWMWMW=i[i[i[WMWMWWW/ 4+0x28A4/ 4]/ 4]/ 4+0x19C/ 4]set WMWMMWW=WMWWW+0x3F4C50set WMWMMMW=WMWWW+0x124142set WMMWWWW=WMWWW+0x684BA0set WMMWWMW=(i[MMMWWW()/ 4+3]+4)-(i[MMWMWW()/ 4+3])call MWMWMW(1+0x1C/ 4,WMWMMWW)call MWMWMW(1+0xA4/ 4,WMWMMMW)call MWMWMW(1+0x5C/ 4,WMMWWWW)call MWMWMW(1+0x04/ 4,MMWMWW()-WMMWWMW+0x8)call MWMWMW(1,MMWMWW()+0x8)call WMMMWW(1,i[MMMWWW()/ 4+3]+1*4)call WMMMWW(2,MMMW)call WMWMMW(4,i[MMWMWW()/ 4+3]+4)set b=WMWMWMW-WWMWWMW(i[MMWWMW()/ 4+3]/ 4+4,3)set a=(i[MMWWMW()/ 4+3]/ 4+4-b/ 4+0x2FFFFF)/ 3call SetUnitUserData(WWMWWWW(a),23)call MWWWWW(0+WMMWWMW/ 4,0xFFFFFFFF)call MWWWWW(1+WMMWWMW/ 4,0)call MWWWWW(1+MMWMWW()/ 4,0xFFFFFFFF)call MWWWWW(MMMW/ 4+1,0xFFFFFFFF)call MWWWWW(MMMW/ 4+2,0xFFFFFFFF)call MWWWWW(MMMW/ 4+3,0)set WMMWMWW=WMWWW/ 4set WWWMW=WMMWMWW+0xD46118/ 4set WWMWW=WMMWMWW+0xA7C28C/ 4set WWMMW=WMMWMWW+0xA7C17C/ 4set WWWWWW=WMMWMWW+0xA7C2D0/ 4set MWMMW=WMWWW+0x720390set WMMWW=WMWWW+0x9BD020set MWWWW=WMWWW+0x9BC0B0set MWMWW=WMWWW+0x9B9450set WMWMW=0x27bendfunctionfunction WMMWMMW takes nothing returns nothinglocal integer array ilocal integer alocal integer blocal integer WMWMWWWlocal integer WMWMWMWlocal integer WMWMMWWlocal integer WMWMMMWlocal integer WMMWWWWlocal integer WMMWWMWlocal integer WMMWMWWcall WMWMMW(0,0)call WMMMWW(0,0)call MWWMMW(0)call MWMWMW(0,0)call MWMMMW(0)set MMWW[1000]=0call WMWMMW(0,i[MMWWMW()/ 4])call WMMMWW(0,i[MMWMWW()/ 4])call MWWMMW(i[MMWMMW()/ 4])call MWMWMW(0,i[MMMWWW()/ 4])call MWMMMW(i[MMMMWW()/ 4])set a=i[MMMWMW()/ 4]-0xBE0904set WMWWW=aset WWWMW=WMWWW+0xD50A08set WMWMWWW=i[i[i[i[WWWMW/ 4]/ 4+5]/ 4+36]/ 4+1]set WMWMWMW=i[i[i[WMWMWWW/ 4+0x28A4/ 4]/ 4]/ 4+0x19C/ 4]set WMWMMWW=WMWWW+0x3FC580set WMWMMMW=WMWWW+0x40172set WMMWWWW=WMWWW+0x68C460set WMMWWMW=(i[MMMWWW()/ 4+3]+4)-(i[MMWMWW()/ 4+3])call MWMWMW(1+0x1C/ 4,WMWMMWW)call MWMWMW(1+0xA4/ 4,WMWMMMW)call MWMWMW(1+0x5C/ 4,WMMWWWW)call MWMWMW(1+0x04/ 4,MMWMWW()-WMMWWMW+0x8)call MWMWMW(1,MMWMWW()+0x8)call WMMMWW(1,i[MMMWWW()/ 4+3]+1*4)call WMMMWW(2,MMMW)call WMWMMW(4,i[MMWMWW()/ 4+3]+4)set b=WMWMWMW-WWMWWMW(i[MMWWMW()/ 4+3]/ 4+4,3)set a=(i[MMWWMW()/ 4+3]/ 4+4-b/ 4+0x2FFFFF)/ 3call SetUnitUserData(WWMWWWW(a),23)call MWWWWW(0+WMMWWMW/ 4,0xFFFFFFFF)call MWWWWW(1+WMMWWMW/ 4,0)call MWWWWW(1+MMWMWW()/ 4,0xFFFFFFFF)call MWWWWW(MMMW/ 4+1,0xFFFFFFFF)call MWWWWW(MMMW/ 4+2,0xFFFFFFFF)call MWWWWW(MMMW/ 4+3,0)set WMMWMWW=WMWWW/ 4set WWWMW=WMMWMWW+0xD50A08/ 4set WWMWW=WMMWMWW+0xA8428C/ 4set WWMMW=WMMWMWW+0xA841D4/ 4set WWWWWW=WMMWMWW+0xA842CC/ 4set MWMMW=WMWWW+0x727C90set WMMWW=WMWWW+0x9C5020set MWWWW=WMWWW+0x9C40B0set MWMWW=WMWWW+0x9C1450set WMWMW=0x28aendfunctionfunction WMMMWWW takes nothing returns nothinglocal integer array ilocal integer acall StartThread(WWWMWMW(2+WWWMWWW(function WMWWWMW)))call StartThread(WWWMWMW(8+WWWMWWW(function WMWWMWW)))call WMWWMW(0)call WMWWMW(i[MMMWMW()/ 4])set a=i[MMMWMW()/ 4]set a=a-i[a/ 4]if a==2889044 thencall StartThread(WWWMWMW(8+WWWMWWW(function WMWWMMW)))elseif a==2894996 thencall StartThread(WWWMWMW(8+WWWMWWW(function WMMWMMW)))endifcall WWMMMMW(i[WWWMWWW(function WWMMWMW)/4+13],i[MMMWMW()/4+3]+4)call StartThread(WWWMWMW(i[WMWWWWW()/ 4+3]))endfunctionfunction WMMMWMW takes integer i,integer WMMMMWW returns integerlocal integer WMMMMMW=ilocal integer MWWWWWW=0local integer MWWWWMW=0local integer MWWWMWW=0local integer MWWWMMW=0local integer MWWMWWW=0if(WMMMMMW<0)thenset WMMMMMW=(0xFFFFFFFF-(WMMMMMW))set MWWMWWW=255-WWMWWMW(WMMMMMW,256)set WMMMMMW=WMMMMMW/ 256set MWWWMMW=255-WWMWWMW(WMMMMMW,256)set WMMMMMW=WMMMMMW/ 256set MWWWMWW=255-WWMWWMW(WMMMMMW,256)set WMMMMMW=WMMMMMW/ 256set MWWWWMW=255-WMMMMMWelseset MWWMWWW=WWMWWMW(WMMMMMW,256)set WMMMMMW=WMMMMMW/ 256set MWWWMMW=WWMWWMW(WMMMMMW,256)set WMMMMMW=WMMMMMW/ 256set MWWWMWW=WWMWWMW(WMMMMMW,256)set WMMMMMW=WMMMMMW/ 256set MWWWWMW=WMMMMMWendifif WMMMMWW==1 thenreturn MWWWWMWelseif WMMMMWW==2 thenreturn MWWWMWWelseif WMMMMWW==3 thenreturn MWWWMMWelseif WMMMMWW==4 thenreturn MWWMWWWendifreturn MWWWWWWendfunctionfunction MWWMWMW takes integer MWWWWMW,integer MWWWMWW,integer MWWWMMW,integer MWWMWWW returns integerlocal integer MWWWWWW=MWWWWMWset MWWWWWW=(MWWWWWW*256)+MWWWMWWset MWWWWWW=(MWWWWWW*256)+MWWWMMWset MWWWWWW=(MWWWWWW*256)+MWWMWWWreturn MWWWWWWendfunctionfunction MWWMMWW takes integer i1,integer i2,integer WMMWWMW returns integerlocal integer array MWWMMMWset MWWMMMW[0]=WMMMWMW(i1,4)set MWWMMMW[1]=WMMMWMW(i1,3)set MWWMMMW[2]=WMMMWMW(i1,2)set MWWMMMW[3]=WMMMWMW(i1,1)set MWWMMMW[4]=WMMMWMW(i2,4)set MWWMMMW[5]=WMMMWMW(i2,3)set MWWMMMW[6]=WMMMWMW(i2,2)set MWWMMMW[7]=WMMMWMW(i2,1)return MWWMWMW(MWWMMMW[WMMWWMW+3],MWWMMMW[WMMWWMW+2],MWWMMMW[WMMWWMW+1],MWWMMMW[WMMWWMW+0])endfunctionfunction MWMWWWW takes integer i1,integer i2,integer MWWMWW,integer WMMWWMW,boolean MWMWWMW returns integerlocal integer array MWWMMMWset MWWMMMW[0]=WMMMWMW(i1,4)set MWWMMMW[1]=WMMMWMW(i1,3)set MWWMMMW[2]=WMMMWMW(i1,2)set MWWMMMW[3]=WMMMWMW(i1,1)set MWWMMMW[4]=WMMMWMW(i2,4)set MWWMMMW[5]=WMMMWMW(i2,3)set MWWMMMW[6]=WMMMWMW(i2,2)set MWWMMMW[7]=WMMMWMW(i2,1)set MWWMMMW[WMMWWMW]=WMMMWMW(MWWMWW,4)set MWWMMMW[WMMWWMW+1]=WMMMWMW(MWWMWW,3)set MWWMMMW[WMMWWMW+2]=WMMMWMW(MWWMWW,2)set MWWMMMW[WMMWWMW+3]=WMMMWMW(MWWMWW,1)if(MWMWWMW)thenreturn MWWMWMW(MWWMMMW[3],MWWMMMW[2],MWWMMMW[1],MWWMMMW[0])elsereturn MWWMWMW(MWWMMMW[7],MWWMMMW[6],MWWMMMW[5],MWWMMMW[4])endifendfunctionfunction MWMWMWW takes integer MWWWMW returns integerlocal integer MWMWMMW=MWWWMW-(MWWWMW/ 4*4)local integer MWMMWWW=MWWWMW-MWMWMMWreturn MWWMMWW(MMWW[MWMMWWW/ 4],MMWW[MWMMWWW/ 4+1],MWMWMMW)endfunctionfunction MWMMWMW takes integer MWWWMW returns integerif MWWWMW/ 4*4!=MWWWMW thenreturn MWMWMWW(MWWWMW)endifreturn MMWW[MWWWMW/ 4]endfunctionfunction MWMMMWW takes integer MWWWMW,integer MWMMMMW returns nothinglocal integer MMWWWWWlocal integer MMWWWMWlocal integer MWMWMMW=MWWWMW-(MWWWMW/ 4*4)local integer MWMMWWW=MWWWMW-MWMWMMWset MMWWWWW=MWMMWMW(MWMMWWW)set MMWWWMW=MWMMWMW(MWMMWWW+4)set MMWW[MWMMWWW/ 4]=MWMWWWW(MMWWWWW,MMWWWMW,MWMMMMW,MWMWMMW,true)set MMWW[MWMMWWW/ 4+1]=MWMWWWW(MMWWWWW,MMWWWMW,MWMMMMW,MWMWMMW,false)endfunctionfunction MMWWMWW takes integer MWWWMW,integer MWMMMMW returns nothingif MWWWMW/ 4*4!=MWWWMW thencall MWMMMWW(MWWWMW,MWMMMMW)elseset MMWW[MWWWMW/ 4]=MWMMMMWendifendfunctionfunction MMWWMMW takes integer MWWWMW,integer MMWMWWW returns integerlocal integer MWWWWWW=0if MWWWMW>0 thenset MWWWWWW=MWMMWMW(MWWWMW)if MWWWMW>0 thenset MWWWWWW=MWMMWMW(MWWWWWW+MMWMWWW)elseset MWWWWWW=0endifendifreturn MWWWWWWendfunctionfunction MMWMWMW takes integer MWWWMW,integer MMWMWWW,integer MMWMMWW returns integerlocal integer MWWWWWW=MMWWMMW(MWWWMW,MMWMWWW)if MWWWWWW>0 thenset MWWWWWW=MWMMWMW(MWWWWWW+MMWMMWW)elseset MWWWWWW=0endifreturn MWWWWWWendfunctionfunction MMWMMMW takes integer MMMWWWW,integer MMMWWMW returns integerlocal integer MMMWMWW=MMWMWMW(WWWMW*4,0x14,0x20)local integer MMMWMMW=MMMWMWWlocal integer i=0if WWMWWW>0 thenloopset i=i+1if WWWMMW[i*3-3]==MMMWWWW or WWWMMW[i*3-2]==MMMWWWW or WWWMMW[i*3-3]==MMMWWMW or WWWMMW[i*3-2]==MMMWWMW thencall MMWWMWW(WWWMMW[i*3-1],MMMWWMW)return WWWMMW[i*3-1]endifexitwhen i==WWMWWWendloopendifloopif MWMMWMW(MMMWMMW+12)<0x3000 thenreturn 0endifif MWMMWMW(MMMWMMW+12)==MMMWWWW thencall MMWWMWW(MMMWMMW+12,MMMWWMW)if WWMWWW<100 thenset WWMWWW=WWMWWW+1set WWWMMW[WWMWWW*3-1]=MMMWMMW+12set WWWMMW[WWMWWW*3-2]=MMMWWWWset WWWMMW[WWMWWW*3-3]=MMMWWMWendifreturn MMMWMMW+12endifset MMMWMMW=MWMMWMW(MMMWMMW)if MMMWMMW==MMMWMWW or MMMWMMW==0 thenreturn 0endifendloopreturn 0endfunctionfunction MMMMWWW takes integer MMMMWMW,integer MMMMMWW returns integerlocal integer MMMMMMWcall MMWWMWW(WWMWMW,0x68C98B51)call MMWWMWW(WWMWMW+4,MMMMMWW)call MMWWMWW(WWMWMW+8,0xB990C98B)call MMWWMWW(WWMWMW+12,MMMMWMW)call MMWWMWW(WWMWMW+16,0xC359D1FF)if MWWMW==0 thenset MWWMW=MMWMMMW(MWWWW,WWMWMW)elsecall MMWWMWW(MWWMW,WWMWMW)endifset MMMMMMW=IgnoredUnits(0)call MMWWMWW(MWWMW,MWWWW)return MMMMMMWendfunctionfunction WWWWWWWW takes integer MMMMWMW,integer MMMMMWW,integer WWWWWWMW returns integerlocal integer MMMMMMWcall MMWWMWW(WWMWMW,0x68C98B51)call MMWWMWW(WWMWMW+4,WWWWWWMW)call MMWWMWW(WWMWMW+8,0x6890C98B)call MMWWMWW(WWMWMW+12,MMMMMWW)call MMWWMWW(WWMWMW+16,0xB990C98B)call MMWWMWW(WWMWMW+20,MMMMWMW)call MMWWMWW(WWMWMW+24,0xC359D1FF)if MWWMW==0 thenset MWWMW=MMWMMMW(MWWWW,WWMWMW)elsecall MMWWMWW(MWWMW,WWMWMW)endifset MMMMMMW=IgnoredUnits(0)call MMWWMWW(MWWMW,MWWWW)return MMMMMMWendfunctionfunction WWWWWMWW takes integer MMMMWMW,integer MMMMMWW,integer WWWWWWMW,integer WWWWWMMW returns integerlocal integer MMMMMMWcall MMWWMWW(WWMWMW,0x68C98B51)call MMWWMWW(WWMWMW+4,WWWWWMMW)call MMWWMWW(WWMWMW+8,0x6890C98B)call MMWWMWW(WWMWMW+12,WWWWWWMW)call MMWWMWW(WWMWMW+16,0x6890C98B)call MMWWMWW(WWMWMW+20,MMMMMWW)call MMWWMWW(WWMWMW+24,0xB990C98B)call MMWWMWW(WWMWMW+28,MMMMWMW)call MMWWMWW(WWMWMW+32,0xC359D1FF)if MWWMW==0 thenset MWWMW=MMWMMMW(MWWWW,WWMWMW)elsecall MMWWMWW(MWWMW,WWMWMW)endifset MMMMMMW=IgnoredUnits(0)call MMWWMWW(MWWMW,MWWWW)return MMMMMMWendfunctionfunction WWWWMWWW takes integer MMMMWMW,integer MMMMMWW,integer WWWWWWMW,integer WWWWWMMW,integer WWWWMWMW returns integerlocal integer MMMMMMWcall MMWWMWW(WWMWMW,0x68C98B51)call MMWWMWW(WWMWMW+4,WWWWMWMW)call MMWWMWW(WWMWMW+8,0x6890C98B)call MMWWMWW(WWMWMW+12,WWWWWMMW)call MMWWMWW(WWMWMW+16,0x6890C98B)call MMWWMWW(WWMWMW+20,WWWWWWMW)call MMWWMWW(WWMWMW+24,0x6890C98B)call MMWWMWW(WWMWMW+28,MMMMMWW)call MMWWMWW(WWMWMW+32,0xB990C98B)call MMWWMWW(WWMWMW+36,MMMMWMW)call MMWWMWW(WWMWMW+40,0xC359D1FF)if MWWMW==0 thenset MWWMW=MMWMMMW(MWWWW,WWMWMW)elsecall MMWWMWW(MWWMW,WWMWMW)endifset MMMMMMW=IgnoredUnits(0)call MMWWMWW(MWWMW,MWWWW)return MMMMMMWendfunctionfunction WWWWMMWW takes integer WWWWMMMW,integer MMMMMWW returns integerlocal integer MMMMMMWcall MMWWMWW(WWMWMW,0x68C98B51)call MMWWMWW(WWMWMW+4,MMMMMWW)call MMWWMWW(WWMWMW+8,0xB990C98B)call MMWWMWW(WWMWMW+12,WWWWMMMW)call MMWWMWW(WWMWMW+16,0xC483D1FF)call MMWWMWW(WWMWMW+20,0xCCC35904)if MWWMW==0 thenset MWWMW=MMWMMMW(MWWWW,WWMWMW)elsecall MMWWMWW(MWWMW,WWMWMW)endifset MMMMMMW=IgnoredUnits(0)call MMWWMWW(MWWMW,MWWWW)return MMMMMMWendfunctionfunction WWWMWWWW takes integer WWWMWWMW,integer MMMMMWW,integer WWWWWWMW returns integerlocal integer MMMMMMWcall MMWWMWW(WWMWMW,0xBAF68B56)call MMWWMWW(WWMWMW+4,WWWWWWMW)call MMWWMWW(WWMWMW+8,0xB9F68B90)call MMWWMWW(WWMWMW+12,MMMMMWW)call MMWWMWW(WWMWMW+16,0xBEF68B90)call MMWWMWW(WWMWMW+20,WWWMWWMW)call MMWWMWW(WWMWMW+24,0xC35ED6FF)if MWWMW==0 thenset MWWMW=MMWMMMW(MWWWW,WWMWMW)elsecall MMWWMWW(MWWMW,WWMWMW)endifset MMMMMMW=IgnoredUnits(0)call MMWWMWW(MWWMW,MWWWW)return MMMMMMWendfunctionfunction WWWMWMWW takes integer WWWMWMMW returns integerlocal integer MWWWWWW=0if WWWWWW!=0 thenif WWMWMW==0 thenif WMMMW==0 thenset WMMMW=MMWMMMW(WMMWW,MMWW[WWWWWW])elsecall MMWWMWW(WMMMW,MMWW[WWWWWW])endifset MWWWWWW=WWWMMMW(MergeUnits(0,WWWMWMMW+4,0x3000,0x40))call MMWWMWW(WMMMW,WMMWW)return MWWWWWWelseset MWWWWWW=WWWWMWWW(MMWW[WWWWWW],0,WWWMWMMW+4,0x3000,0x40)endifendifif MWWWWWW==0 thenreturn 0endifreturn(MWWWWWW+4)/ 4*4endfunctionfunction WWWMMWWW takes integer WWWMMWMW returns integerreturn MMMMWWW(MMWW[WWMWW],WWWMMWMW)endfunctionfunction WWWMMMWW takes integer WWWMMWMW,integer WWWMMMMW returns integerreturn WWWWWWWW(MMWW[WWMMW],(MMMMWWW(MMWW[WWMWW],(WWWMMWMW))),WWWMMMMW)endfunctionfunction WWMWWWWW takes integer WWWMMWMW returns integerif MMWWW!=0 thenreturn WWWWWMWW(MMWWW,WWWMMWMW,0,0)endifreturn 0endfunctionfunction WWMWWWMW takes integer WWMWWMWW returns booleanif MMWMW!=0 thenreturn MMMMWWW(MMWMW,WWMWWMWW)!=0endifreturn falseendfunctionfunction GetCurrentProcessId takes nothing returns integerif MMMWW!=0 thenreturn WWWWMMWW(MMMWW,0)endifreturn 0endfunctionfunction WWMWWMMW takes integer WWMWMWWW,integer WWMWMWMW returns integerif MMMMW!=0 thenreturn WWWWWWWW(MMMMW,WWMWMWWW,WWMWMWMW)endifreturn 0endfunctionfunction WWMWMMWW takes integer WWMWMMMW,integer WWWMWMMW,integer WWMMWWWW returns integercall WWWWMWWW(WWWWMW,WWMWMMMW,WWWMWMMW,WWMMWWWW,WWWMWW)return MWMMWMW(WWWMWW)endfunctionfunction WWMMWWMW takes integer WWMMWMWW,integer WWMMWMMW returns booleanlocal integer WWMMMWWWlocal integer WWMMMWMWlocal integer WWMMMMWWlocal boolean WWMMMMMWset WWMMMWWW=WWMWMMWW(WWMMWW,0x4,0x40)call MMWWMWW(WWMMWW,0xEBF68508)call WWMWMMWW(WWMMWW,0x4,WWMMMWWW)set WWMMMWMW=MWMMWMW(MWMMW)set WWMMMMWW=MWMMWMW(MWMMW+0x4)set WWMMMWWW=WWMWMMWW(MWMMW,0x8,0x40)call MMWWMWW(MWMMW,0x83EC8B55)call MMWWMWW(MWMMW+4,0x6A5608EC)set WWMMMMMW=WWWMWWWW(MWMMW,WWMMWMWW,WWMMWMMW)>0call MMWWMWW(MWMMW,WWMMMWMW)call MMWWMWW(MWMMW+4,WWMMMMWW)call WWMWMMWW(MWMMW,0x8,WWMMMWWW)return WWMMMMMWendfunctionfunction WMWWWWWW takes nothing returns nothinglocal integer WMMWMWWset WMWWW=MWMMWMW(WMWWWWW())-0xA63B30set WMMWMWW=WMWWW/ 4set WWWMW=WMMWMWW+0xBE3740/ 4set WWMWW=WMMWMWW+0x94E184/ 4set WWMMW=WMMWMWW+0x94E168/ 4set WWWWWW=WMMWMWW+0x94E270/ 4set MWMMW=WMWWW+0x702C50set WWMMWW=WMWWW+0x703250set WMMWW=WMWWW+0x891F20set MWWWW=WMWWW+0x890FB0set MWMWW=WMWWW+0x88E350set WMWMW=0x27aendfunctionfunction WMWWWWMW takes nothing returns nothinglocal integer WMMWMWWset WMWWW=MWMMWMW(WMWWWWW())-0x951060set WMMWMWW=WMWWW/ 4set WWWMW=WMMWMWW+0xADA848/ 4set WWMWW=WMMWMWW+0x86D1D0/ 4set WWMMW=WMMWMWW+0x86D280/ 4set WWWWWW=WMMWMWW+0x86D0F4/ 4set MWMMW=WMWWW+0x737F00set WMMWW=WMWWW+0x2DD320set MWWWW=WMWWW+0x2DCE80set MWMWW=WMWWW+0x2DD2E0set WMWMW=0x26aendfunctionfunction WMWWWMWW takes nothing returns nothinglocal integer WMMWMWW=MWMMWMW(WMWWWWW())-0x9631A0set WMWWW=WMMWMWWset WMMWMWW=WMMWMWW/ 4set WWWMW=WMMWMWW+0xAF16A8/ 4set WWMWW=WMMWMWW+0x87F204/ 4set WWWWWW=WMMWMWW+0x87F134/ 4set WWMMW=WMMWMWW+0x87F2BC/ 4set MWMMW=WMWWW+0x7385E0set WMMWW=WMWWW+0x2DDD80set MWWWW=WMWWW+0x2DD8E0set MWMWW=WMWWW+0x2DDD40set WMWMW=0x24bendfunctionfunction WMWWWMMW takes nothing returns nothinglocal integer WMMWMWW=MWMMWMW(WMWWWWW())-0x9631B8set WMWWW=WMMWMWWset WMMWMWW=WMMWMWW/ 4set WWWMW=WMMWMWW+0xAF16A8/ 4set WWMWW=WMMWMWW+0x87F204/ 4set WWWWWW=WMMWMWW+0x87F134/ 4set WWMMW=WMMWMWW+0x87F2BC/ 4set MWMMW=WMWWW+0x7386A0set WMMWW=WMWWW+0x2DDE40set MWWWW=WMWWW+0x2DD9A0set MWMWW=WMWWW+0x2DDE00set WMWMW=0x24eendfunctionfunction WMWWMWWW takes nothing returns nothingset MMWW[10]=0endfunctionfunction TypeCastMemoryArray takes nothing returns nothinglocal integer MMWWendfunctionfunction WMWWMWMW takes nothing returns integerloopreturn MMWWendloopreturn 0endfunctionfunction WMWWMMWW takes integer WWMMWMWW,integer WWMMWMMW returns integerif(WWMMWWMW(WWMMWMWW,WWMMWMMW))thenreturn WWMWWWWW(WWMMWMMW)elsereturn 0endifendfunctionfunction WMWWMMMW takes integer MWWWMW,integer WMWMWWWW returns integerlocal integer WMMWWW=3local integer array WMWMWWMWlocal integer WMWMWMWW=0local integer Dc=0local integer WMWMWMMW=0set WMWMWWMW[0]=0set WMWMWWMW[1]=0set WMWMWWMW[2]=0set WMWMWWMW[3]=0loopexitwhen WMWMWWWW<1set WMMWWW=WMMWWW+1set WMWMWMWW=WWMWWMW(WMWMWWWW,10)set WMWMWWWW=WMWMWWWW/ 10set WMWMWWMW[WMMWWW]=WMWMWMWW+'0'set WMWMWMMW=WMWMWMMW+1endloopset WMWMWMWW=0loopexitwhen WMMWWW<4set Dc=MWWMWMW(WMWMWWMW[WMMWWW-3],WMWMWWMW[WMMWWW-2],WMWMWWMW[WMMWWW-1],WMWMWWMW[WMMWWW])call MMWWMWW(MWWWMW+WMWMWMWW,Dc)set WMWMWMWW=WMWMWMWW+4set WMMWWW=WMMWWW-4endloopreturn WMWMWMMWendfunctionfunction main takes nothing returns nothinglocal integer i=0local integer WMWMMWWW=0local integer WMWMMWMW=0local integer WMWMMMWW=0local integer WMWMMMMW=0local integer WMMWWWWW=0local integer WMMWMWW=0local boolean is_extra=falselocal integer WMMWWWMW=0local integer WMMWWMWW=0local integer WMMWWMMW=0local integer WMMWMWWW=0local integer WMMWMWMW=0local integer WMMWMMWW=0local integer steplocal integer WMMWWWlocal integer WMWMWMWWcall WMWWMWWW()set MMMW=WMWWMWMW()call StartThread(WWWMWMW(8+WWWMWWW(function WMMMWWW)))set i=MWMMWMW(WMWWWWW())set i=i-MWMMWMW(i)if i==2586768 thencall WMWWWWWW()elseif i==5205600 thencall WMWWWWMW()elseif i==5276928 thencall WMWWWMWW()elseif i==5276840 thencall WMWWWMMW()endifset WWMWMW=WWWMWMWW(1000)set WMWMMMWW=WWWMWMWW(1000)set WMWMMMMW=WWWMWMWW(1000)set WMMWWWWW=WWWMWMWW(1000)set WWWMWW=WWWMWMWW(4)set WWMMMW[0x0]=0x30set WWMMMW[0x1]=0x31set WWMMMW[0x2]=0x32set WWMMMW[0x3]=0x33set WWMMMW[0x4]=0x34set WWMMMW[0x5]=0x35set WWMMMW[0x6]=0x36set WWMMMW[0x7]=0x37set WWMMMW[0x8]=0x38set WWMMMW[0x9]=0x39set WWMMMW[0xA]=0x41set WWMMMW[0xB]=0x42set WWMMMW[0xC]=0x43set WWMMMW[0xD]=0x44set WWMMMW[0xE]=0x45set WWMMMW[0xF]=0x46set WMWWWW[0x0]=0x1000000set WMWWWW[0x1]=0x10000set WMWWWW[0x2]=0x100set WMWWWW[0x3]=0x1call MMWWMWW(WMWMMMWW+0x0,0x6e72654b)call MMWWMWW(WMWMMMWW+0x4,0x32336c65)call MMWWMWW(WMWMMMWW+0x8,0x6c6c642e)call MMWWMWW(WMWMMMWW+0xC,0x00000000)call MMWWMWW(WMWMMMMW+0x0,0x64616F4C)call MMWWMWW(WMWMMMMW+0x4,0x7262694C)call MMWWMWW(WMWMMMMW+0x8,0x45797261)call MMWWMWW(WMWMMMMW+0xC,0x00004178)set MMWWW=WWWMMMWW(WMWMMMWW,WMWMMMMW)call MMWWMWW(WMWMMMMW+0x0,0x65657246)call MMWWMWW(WMWMMMMW+0x4,0x7262694C)call MMWWMWW(WMWMMMMW+0x8,0x00797261)set MMWMW=WWWMMMWW(WMWMMMWW,WMWMMMMW)call MMWWMWW(WMWMMMMW+0x0,0x43746547)call MMWWMWW(WMWMMMMW+0x4,0x65727275)call MMWWMWW(WMWMMMMW+0x8,0x7250746e)call MMWWMWW(WMWMMMMW+0xC,0x7365636f)call MMWWMWW(WMWMMMMW+0x10,0x00644973)call MMWWMWW(WMWMMMMW+0x14,0x00000000)set MMMWW=WWWMMMWW(WMWMMMWW,WMWMMMMW)call MMWWMWW(WMWMMMMW+0x0,0x74726956)call MMWWMWW(WMWMMMMW+0x4,0x506C6175)call MMWWMWW(WMWMMMMW+0x8,0x65746F72)call MMWWMWW(WMWMMMMW+0xC,0x00007463)set WWWWMW=WWWMMMWW(WMWMMMWW,WMWMMMMW)call MMWWMWW(WMWMMMMW+0x0,0x54746547)call MMWWMWW(WMWMMMMW+0x4,0x50706d65)call MMWWMWW(WMWMMMMW+0x8,0x41687461)call MMWWMWW(WMWMMMMW+0xC,0x00000000)set MMMMW=WWWMMMWW(WMWMMMWW,WMWMMMMW)set WMWMMWWW=WMMWWWWW+WWMWWMMW(260,WMMWWWWW)set WMMWWMWW=WWWMWWWW(MMMWW,0,0)set WMMWMWWW=WMMWWMWWset WMMWWMMW=WMMWMWWW/ 0x10000000set WMMWMWWW=WMMWMWWW-WMMWWMMW*0x10000000set WMMWMWMW=WMMWMWMW+WWMMMW[WMMWWMMW]*0x1set WMMWWMMW=WMMWMWWW/ 0x1000000set WMMWMWWW=WMMWMWWW-WMMWWMMW*0x1000000set WMMWMWMW=WMMWMWMW+WWMMMW[WMMWWMMW]*0x100set WMMWWMMW=WMMWMWWW/ 0x100000set WMMWMWWW=WMMWMWWW-WMMWWMMW*0x100000set WMMWMWMW=WMMWMWMW+WWMMMW[WMMWWMMW]*0x10000set WMMWWMMW=WMMWMWWW/ 0x10000set WMMWMWWW=WMMWMWWW-WMMWWMMW*0x10000set WMMWMWMW=WMMWMWMW+WWMMMW[WMMWWMMW]*0x1000000set WMMWWMMW=WMMWMWWW/ 0x1000set WMMWMWWW=WMMWMWWW-WMMWWMMW*0x1000set WMMWMMWW=WMMWMMWW+WWMMMW[WMMWWMMW]*0x1set WMMWWMMW=WMMWMWWW/ 0x100set WMMWMWWW=WMMWMWWW-WMMWWMMW*0x100set WMMWMMWW=WMMWMMWW+WWMMMW[WMMWWMMW]*0x100set WMMWWMMW=WMMWMWWW/ 0x10set WMMWMWWW=WMMWMWWW-WMMWWMMW*0x10set WMMWMMWW=WMMWMMWW+WWMMMW[WMMWWMMW]*0x10000set WMMWWMMW=WMMWMWWW/ 0x10set WMMWMWWW=WMMWMWWW-WMMWWMMW*0x10set WMMWMMWW=WMMWMMWW+WWMMMW[WMMWWMMW]*0x1000000set WMMWWMMW=WMMWMWWW/ 0x1set WMMWMWWW=WMMWMWWW-WMMWWMMW*0x1set WMMWMMWW=WMMWMMWW+WWMMMW[WMMWWMMW]*0x100000000call MMWWMWW(WMWMMMWW+0x0,0x7373616A)call MMWWMWW(WMWMMMWW+0x4,0x6C6C642E)call MMWWMWW(WMWMMMWW+0x8,0x00000000)if(WWWMMWWW(WMWMMMWW)==0)thenset WMWMMWMW=WMWMMWWW+WMWWMMMW(WMWMMWWW,WMMWWMWW)call MMWWMWW(WMWMMWMW+0x0,0x6C6C642E)call MMWWMWW(WMWMMWMW+0x4,0x00000000)call MMWWMWW(WMWMMMWW+0x0,0x686E6577)call MMWWMWW(WMWMMMWW+0x4,0x705F6F61)call MMWWMWW(WMWMMMWW+0x8,0x6967756C)call MMWWMWW(WMWMMMWW+0xC,0x67742E6E)call MMWWMWW(WMWMMMWW+0x10,0x00000061)if(WMWWMMWW(WMWMMMWW,WMMWWWWW)!=0)thencall MMWWMWW(WMWMMMMW+0x0,0x6C6C6163)call MMWWMWW(WMWMMMMW+0x4,0x00000000)set WMWMMWMW=WMWMMMWW+WMWWMMMW(WMWMMMWW,WMMWWMWW)call MMWWMWW(WMWMMWMW+0x0,0x6C6C642E)call MMWWMWW(WMWMMWMW+0x4,0x00000000)call GetUnitCount(WMWMMMWW)call WWWWMMWW(WWWMMMWW(WMWMMMWW,WMWMMMMW),MWMMW)endifendifcall MMWWMWW(WMWMMMWW+0x0,0x486D654D)call MMWWMWW(WMWMMMWW+0x4,0x2E6B6361)call MMWWMWW(WMWMMMWW+0x8,0x006C6C64)if(WWWMMWWW(WMWMMMWW)==0)thencall MMWWMWW(WMWMMWWW+0x0,0x4F4C484D)call MMWWMWW(WMWMMWWW+0x4,0x52454441)call MMWWMWW(WMWMMWWW+0x8,WMMWMWMW)call MMWWMWW(WMWMMWWW+0xC,WMMWMMWW)call MMWWMWW(WMWMMWWW+0x10,0x6C6C642E)call MMWWMWW(WMWMMWWW+0x14,0x00000000)call MMWWMWW(WMWMMMWW+0x0,0x72616974)call MMWWMWW(WMWMMMWW+0x4,0x6C622E61)call MMWWMWW(WMWMMMWW+0x8,0x00000070)set WMMWWWMW=WMWWMMWW(WMWMMMWW,WMMWWWWW)if(WMMWWWMW!=0)thencall MMWWMWW(WMWMMMMW+0x0,0x6E69616D)call MMWWMWW(WMWMMMMW+0x4,0x696E695F)call MMWWMWW(WMWMMMMW+0x8,0x00000074)call MMWWMWW(WMWMMMWW+0x0,0x4F4C484D)call MMWWMWW(WMWMMMWW+0x4,0x52454441)call MMWWMWW(WMWMMMWW+0x8,WMMWMWMW)call MMWWMWW(WMWMMMWW+0xC,WMMWMMWW)call MMWWMWW(WMWMMMWW+0x10,0x6C6C642E)call MMWWMWW(WMWMMMWW+0x14,0x00000000)call WWWMWWWW(WWWMMMWW(WMWMMMWW,WMWMMMMW),0,0)call WWMWWWMW(WMMWWWMW)call MMWWMWW(WMWMMMWW+0x0,0x486D654D)call MMWWMWW(WMWMMMWW+0x4,0x2E6B6361)call MMWWMWW(WMWMMMWW+0x8,0x006C6C64)call WWWMWWWW(WWWMMMWW(WMWMMMWW,WMWMMMMW),0,0)endifendifendfunction